// Clusters JavaScript - Version 2.4 - Fixed all syntax errors
console.log('Clusters script loaded - version 2.4 - Fixed all syntax errors - ' + new Date().toISOString());

let allClusters = [];
let filteredClusters = [];
let currentPage = 1;
const clustersPerPage = 10;

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    loadClusters();
    setupFilters();
});

async function loadClusters() {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã...');
    try {
        const response = await fetch('/api/clusters');
        console.log('üì° –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', response.status);
        const data = await response.json();
        console.log('üìä –î–∞–Ω–Ω—ã–µ:', data);
        
        if (data.clusters && Array.isArray(data.clusters)) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:', data.clusters.length);
            allClusters = data.clusters;
            filteredClusters = [...allClusters];
            updateCounts();
            displayClusters();
            populateMarketFilter();
        } else {
            console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:', data);
            showAlert('danger', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: ' + (data.error || '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'));
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:', error);
        showAlert('danger', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: ' + error.message);
    }
}

function setupFilters() {
    // –°–ª–∞–π–¥–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
    const syncSlider = document.getElementById('syncScoreFilter');
    const syncValue = document.getElementById('syncScoreValue');
    
    syncSlider.addEventListener('input', function() {
        syncValue.textContent = this.value + '%';
    });
}

function populateMarketFilter() {
    const marketFilter = document.getElementById('marketFilter');
    const markets = [...new Set(allClusters.map(c => c.market_name))].sort();
    
    markets.forEach(market => {
        const option = document.createElement('option');
        option.value = market;
        option.textContent = market;
        marketFilter.appendChild(option);
    });
}

function applyFilters() {
    const syncScore = parseFloat(document.getElementById('syncScoreFilter').value);
    const volume = parseFloat(document.getElementById('volumeFilter').value) || 0;
    const wallets = parseInt(document.getElementById('walletsFilter').value) || 1;
    const market = document.getElementById('marketFilter').value;
    
    filteredClusters = allClusters.filter(cluster => {
        return cluster.sync_score >= syncScore &&
               cluster.total_volume >= volume &&
               cluster.wallets_count >= wallets &&
               (market === '' || cluster.market_name === market);
    });
    
    currentPage = 1;
    updateCounts();
    displayClusters();
}

function clearFilters() {
    document.getElementById('syncScoreFilter').value = 0;
    document.getElementById('syncScoreValue').textContent = '0%';
    document.getElementById('volumeFilter').value = 0;
    document.getElementById('walletsFilter').value = 1;
    document.getElementById('marketFilter').value = '';
    
    filteredClusters = [...allClusters];
    currentPage = 1;
    updateCounts();
    displayClusters();
}

function updateCounts() {
    document.getElementById('filteredCount').textContent = filteredClusters.length;
    document.getElementById('totalCount').textContent = allClusters.length;
}

function displayClusters() {
    const startIndex = (currentPage - 1) * clustersPerPage;
    const endIndex = startIndex + clustersPerPage;
    const pageClusters = filteredClusters.slice(startIndex, endIndex);
    
    const container = document.getElementById('clustersList');
    
    if (pageClusters.length === 0) {
        container.innerHTML = `
            <div class="text-center text-muted">
                <i class="fas fa-search fa-2x mb-2"></i>
                <p>–ö–ª–∞—Å—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.</p>
            </div>
        `;
        updatePagination();
        return;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–∞—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    loadMarketInfoAsync(pageClusters).then(marketInfoMap => {
        const clustersHtml = pageClusters.map((cluster, index) => {
            const marketInfo = marketInfoMap[cluster.market_id] || {
                name: cluster.market_name || `Market ${cluster.market_id}`,
                url: `https://polymarket.com/search?q=${cluster.market_id}`,
                description: cluster.market_question || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'
            };
            
            // –£–ª—É—á—à–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞
            let displayName = marketInfo.name;
            if (!displayName || displayName.startsWith('Market 0x') || displayName.length > 60) {
                displayName = cluster.market_question || `Market ${cluster.market_id.substring(0, 8)}...`;
            }
            
            const clusterIndex = startIndex + index;
            
            return `
                <div class="card cluster-card ${getRiskClass(cluster.sync_score)} mb-3">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <h5 class="market-name">
                                    <a href="${marketInfo.url}" target="_blank" class="text-decoration-none" title="${marketInfo.name}">
                                        ${displayName}
                                        <i class="fas fa-external-link-alt ms-1"></i>
                                    </a>
                                </h5>
                                <p class="text-muted mb-2">${marketInfo.description}</p>
                        
                                <div class="d-flex flex-wrap gap-2 mb-3">
                                    <span class="badge bg-${cluster.side === 'YES' ? 'success' : 'danger'} fs-6">
                                        ${cluster.side}
                                    </span>
                                    <span class="badge bg-info">
                                        <i class="fas fa-wallet"></i> ${cluster.wallets_count} –∫–æ—à–µ–ª—å–∫–æ–≤
                                    </span>
                                    <span class="badge bg-secondary">
                                        <i class="fas fa-exchange-alt"></i> ${cluster.trades_count} —Å–¥–µ–ª–æ–∫
                                    </span>
                                    <span class="badge bg-warning text-dark">
                                        <i class="fas fa-clock"></i> ${cluster.time_window_str}
                                    </span>
                                </div>
                        
                                <div class="row">
                                    <div class="col-md-6">
                                        <strong>–ö–æ—à–µ–ª—å–∫–∏:</strong>
                                        <div class="mt-1">
                                            ${cluster.wallets.slice(0, 3).map(wallet => 
                                                `<span class="wallet-address me-1">${wallet.substring(0, 8)}...</span>`
                                            ).join('')}
                                            ${cluster.wallets.length > 3 ? `<span class="text-muted">+${cluster.wallets.length - 3} –µ—â–µ</span>` : ''}
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <strong>–í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ:</strong>
                                        <div class="text-muted small">
                                            ${formatTime(cluster.start_time)} - ${formatTime(cluster.end_time)}
                                        </div>
                                    </div>
                                </div>
                            </div>
                    
                            <div class="col-md-4 text-end">
                                <div class="sync-score ${getSyncScoreClass(cluster.sync_score)} mb-2">
                                    ${cluster.sync_score.toFixed(1)}%
                                </div>
                                <div class="text-muted small mb-2">–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å</div>
                        
                                <div class="fw-bold fs-5 mb-1">${formatCurrency(cluster.total_volume)}</div>
                                <div class="text-muted small mb-2">–û–±—â–∏–π –æ–±—ä–µ–º</div>
                        
                                <div class="text-muted small mb-2">
                                    ${formatCurrency(cluster.avg_trade_size)} —Å—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞
                                </div>
                        
                                <button class="btn btn-outline-primary btn-sm" onclick="showClusterDetails(${clusterIndex})">
                                    <i class="fas fa-eye"></i> –î–µ—Ç–∞–ª–∏
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    
        container.innerHTML = clustersHtml;
        updatePagination();
    });
}

async function loadMarketInfoAsync(clusters) {
    const marketIds = [...new Set(clusters.map(c => c.market_id))];
    const marketInfoMap = {};
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–∞—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const promises = marketIds.map(async (marketId) => {
        try {
            const response = await fetch(`/api/market-info/${marketId}`);
            const data = await response.json();
            if (data.success) {
                marketInfoMap[marketId] = data.market;
            }
        } catch (error) {
            console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ ${marketId}:`, error);
        }
    });
    
    await Promise.all(promises);
    return marketInfoMap;
}

function updatePagination() {
    const totalPages = Math.ceil(filteredClusters.length / clustersPerPage);
    const pagination = document.getElementById('pagination');
    
    if (totalPages <= 1) {
        pagination.innerHTML = '';
        return;
    }
    
    let paginationHtml = '';
    
    // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if (currentPage > 1) {
        paginationHtml += `
            <li class="page-item">
                <a class="page-link" href="#" onclick="changePage(${currentPage - 1})">–ü—Ä–µ–¥—ã–¥—É—â–∞—è</a>
            </li>
        `;
    }
    
    // –°—Ç—Ä–∞–Ω–∏—Ü—ã
    const startPage = Math.max(1, currentPage - 2);
    const endPage = Math.min(totalPages, currentPage + 2);
    
    for (let i = startPage; i <= endPage; i++) {
        paginationHtml += `
            <li class="page-item ${i === currentPage ? 'active' : ''}">
                <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
            </li>
        `;
    }
    
    // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if (currentPage < totalPages) {
        paginationHtml += `
            <li class="page-item">
                <a class="page-link" href="#" onclick="changePage(${currentPage + 1})">–°–ª–µ–¥—É—é—â–∞—è</a>
            </li>
        `;
    }
    
    pagination.innerHTML = paginationHtml;
}

function changePage(page) {
    currentPage = page;
    displayClusters();
}

function showClusterDetails(clusterIndex) {
    const cluster = filteredClusters[clusterIndex];
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
    const modalHtml = `
        <div class="modal fade" id="clusterDetailsModal" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">–î–µ—Ç–∞–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–Ω–∫–µ</h6>
                                <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${cluster.market_name}</p>
                                <p><strong>–í–æ–ø—Ä–æ—Å:</strong> ${cluster.market_question}</p>
                                <p><strong>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</strong> 
                                    <span class="badge bg-${cluster.side === 'YES' ? 'success' : 'danger'}">${cluster.side}</span>
                                </p>
                            </div>
                            <div class="col-md-6">
                                <h6>–ú–µ—Ç—Ä–∏–∫–∏</h6>
                                <p><strong>–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å:</strong> ${cluster.sync_score.toFixed(1)}%</p>
                                <p><strong>–û–±—ä–µ–º:</strong> ${formatCurrency(cluster.total_volume)}</p>
                                <p><strong>–°–¥–µ–ª–æ–∫:</strong> ${cluster.trades_count}</p>
                                <p><strong>–ö–æ—à–µ–ª—å–∫–æ–≤:</strong> ${cluster.wallets_count}</p>
                            </div>
                        </div>
                        
                        <h6 class="mt-3">–ö–æ—à–µ–ª—å–∫–∏</h6>
                        <div class="row">
                            ${cluster.wallets.map(wallet => `
                                <div class="col-md-6 mb-2">
                                    <span class="wallet-address">${wallet}</span>
                                </div>
                            `).join('')}
                        </div>
                        
                        <h6 class="mt-3">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º</h6>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>–ö–æ—à–µ–ª–µ–∫</th>
                                        <th>–°–¥–µ–ª–æ–∫</th>
                                        <th>–û–±—ä–µ–º</th>
                                        <th>–¶–µ–Ω–∞</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${Object.entries(cluster.wallet_stats).map(([wallet, stats]) => `
                                        <tr>
                                            <td><span class="wallet-address">${wallet.substring(0, 12)}...</span></td>
                                            <td>${stats.trades_count}</td>
                                            <td>${formatCurrency(stats.total_amount)}</td>
                                            <td>${stats.avg_price.toFixed(3)}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingModal = document.getElementById('clusterDetailsModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = new bootstrap.Modal(document.getElementById('clusterDetailsModal'));
    modal.show();
}

function exportClusters() {
    const dataStr = JSON.stringify(filteredClusters, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = `clusters_${new Date().toISOString().split('T')[0]}.json`;
    link.click();
}

function showAlert(type, message) {
    // –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç
    const alertHtml = `
        <div class="alert alert-${type} alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –≤ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const container = document.querySelector('.row:first-child');
    container.insertAdjacentHTML('afterbegin', alertHtml);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        const alert = document.querySelector('.alert');
        if (alert) {
            alert.remove();
        }
    }, 5000);
}

function getRiskClass(syncScore) {
    if (syncScore >= 80) return 'border-danger';
    if (syncScore >= 60) return 'border-warning';
    return 'border-info';
}

function getSyncScoreClass(syncScore) {
    if (syncScore >= 80) return 'text-danger fw-bold';
    if (syncScore >= 60) return 'text-warning fw-bold';
    return 'text-info fw-bold';
}

function formatCurrency(amount) {
    return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
    }).format(amount);
}

function formatTime(timestamp) {
    return new Date(timestamp * 1000).toLocaleString('ru-RU');
}