#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å–∫–∞ ShadowFlow –¥–ª—è —Ä–∞–±–æ—Ç—ã 24/7
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
"""

import os
import sys
import time
import signal
import subprocess
import threading
import psutil
from datetime import datetime
import json
import requests

class ShadowFlow24_7:
    def __init__(self):
        self.flask_process = None
        self.scheduler_process = None
        self.is_running = False
        self.restart_count = 0
        self.max_restarts = 10
        self.restart_delay = 30  # —Å–µ–∫—É–Ω–¥
        self.health_check_interval = 60  # —Å–µ–∫—É–Ω–¥
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ª–æ–≥–∞–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if os.path.exists("/app"):
            # Docker –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            self.log_file = "/app/logs/24_7.log"
        else:
            # –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            self.log_file = "/Users/Kos/shadowflow/logs/24_7.log"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        os.makedirs(os.path.dirname(self.log_file), exist_ok=True)
        
    def log(self, message):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_message = f"[{timestamp}] {message}"
        print(log_message)
        
        try:
            with open(self.log_file, "a", encoding="utf-8") as f:
                f.write(log_message + "\n")
        except:
            pass
    
    def start_flask(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask —Å–µ—Ä–≤–µ—Ä"""
        try:
            self.log("üöÄ –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
            self.flask_process = subprocess.Popen(
                [sys.executable, "app.py"],
                cwd="/app" if os.path.exists("/app") else "/Users/Kos/shadowflow",
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            time.sleep(5)
            
            if self.flask_process.poll() is None:
                self.log("‚úÖ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                self.log("‚ùå Flask —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flask: {e}")
            return False
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        try:
            self.log("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            self.scheduler_process = subprocess.Popen(
                [sys.executable, "scheduler.py"],
                cwd="/app" if os.path.exists("/app") else "/Users/Kos/shadowflow",
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            time.sleep(3)
            
            if self.scheduler_process.poll() is None:
                self.log("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                self.log("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            return False
    
    def check_flask_health(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = requests.get("http://127.0.0.1:5001/api/scheduler-status", timeout=10)
            return response.status_code == 200
        except:
            return False
    
    def check_scheduler_health(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if self.scheduler_process and self.scheduler_process.poll() is None:
                return True
            return False
        except:
            return False
    
    def restart_flask(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç Flask —Å–µ—Ä–≤–µ—Ä"""
        self.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
        
        if self.flask_process:
            try:
                self.flask_process.terminate()
                self.flask_process.wait(timeout=10)
            except:
                try:
                    self.flask_process.kill()
                except:
                    pass
        
        time.sleep(2)
        return self.start_flask()
    
    def restart_scheduler(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        
        if self.scheduler_process:
            try:
                self.scheduler_process.terminate()
                self.scheduler_process.wait(timeout=10)
            except:
                try:
                    self.scheduler_process.kill()
                except:
                    pass
        
        time.sleep(2)
        return self.start_scheduler()
    
    def health_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Flask
                if not self.check_flask_health():
                    self.log("‚ö†Ô∏è Flask —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
                    if not self.restart_flask():
                        self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Flask")
                        self.restart_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                if not self.check_scheduler_health():
                    self.log("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
                    if not self.restart_scheduler():
                        self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
                        self.restart_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
                if self.restart_count >= self.max_restarts:
                    self.log(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ ({self.max_restarts})")
                    self.stop()
                    break
                
                time.sleep(self.health_check_interval)
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
                time.sleep(self.health_check_interval)
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É 24/7"""
        self.log("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã ShadowFlow 24/7...")
        self.is_running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
        if not self.start_flask():
            self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Flask, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if not self.start_scheduler():
            self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
            return False
        
        self.log("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        self.log("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://127.0.0.1:5001")
        self.log("üìä Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://127.0.0.1:5001/realtime")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        monitor_thread = threading.Thread(target=self.health_monitor, daemon=True)
        monitor_thread.start()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        try:
            while self.is_running:
                time.sleep(1)
        except KeyboardInterrupt:
            self.log("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            self.stop()
        
        return True
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É"""
        self.log("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        self.is_running = False
        
        if self.flask_process:
            try:
                self.flask_process.terminate()
                self.flask_process.wait(timeout=10)
                self.log("‚úÖ Flask —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except:
                try:
                    self.flask_process.kill()
                    self.log("‚úÖ Flask —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except:
                    pass
        
        if self.scheduler_process:
            try:
                self.scheduler_process.terminate()
                self.scheduler_process.wait(timeout=10)
                self.log("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except:
                try:
                    self.scheduler_process.kill()
                    self.log("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except:
                    pass
        
        self.log("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def get_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'is_running': self.is_running,
            'flask_running': self.check_flask_health(),
            'scheduler_running': self.check_scheduler_health(),
            'restart_count': self.restart_count,
            'uptime': time.time() - self.start_time if hasattr(self, 'start_time') else 0
        }

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    print("\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    if hasattr(signal_handler, 'system'):
        signal_handler.system.stop()
    sys.exit(0)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ ShadowFlow 24/7 System")
    print("=========================")
    print("")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    system = ShadowFlow24_7()
    system.start_time = time.time()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal_handler.system = system
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        system.start()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        system.stop()
        sys.exit(1)

if __name__ == "__main__":
    main()
