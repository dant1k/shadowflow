#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ShadowFlow –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Linux/Ubuntu —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å systemd
"""

import os
import sys
import subprocess
import json
import shutil
from datetime import datetime

class ServerDeployer:
    def __init__(self):
        self.project_name = "shadowflow"
        self.service_name = "shadowflow"
        self.user = os.getenv('USER', 'ubuntu')
        self.project_dir = f"/home/{self.user}/{self.project_name}"
        self.service_file = f"/etc/systemd/system/{self.service_name}.service"
        self.nginx_config = f"/etc/nginx/sites-available/{self.project_name}"
        
    def log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"[{timestamp}] {message}")
    
    def check_requirements(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–∞"""
        self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–∞...")
        
        requirements = {
            'python3': 'python3 --version',
            'pip3': 'pip3 --version',
            'nginx': 'nginx -v',
            'systemctl': 'systemctl --version'
        }
        
        missing = []
        for tool, command in requirements.items():
            try:
                result = subprocess.run(command.split(), capture_output=True, text=True)
                if result.returncode == 0:
                    self.log(f"‚úÖ {tool}: {result.stdout.strip()}")
                else:
                    missing.append(tool)
            except:
                missing.append(tool)
        
        if missing:
            self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}")
            return False
        
        self.log("‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        return True
    
    def install_dependencies(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.log("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        commands = [
            "sudo apt update",
            "sudo apt install -y python3 python3-pip python3-venv nginx",
            "sudo apt install -y build-essential cmake",
            "sudo apt install -y git curl wget"
        ]
        
        for cmd in commands:
            self.log(f"–í—ã–ø–æ–ª–Ω—è–µ–º: {cmd}")
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            if result.returncode != 0:
                self.log(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
                return False
        
        self.log("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    
    def create_project_structure(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        self.log("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dirs = [
            self.project_dir,
            f"{self.project_dir}/logs",
            f"{self.project_dir}/data",
            f"{self.project_dir}/static",
            f"{self.project_dir}/templates"
        ]
        
        for dir_path in dirs:
            os.makedirs(dir_path, exist_ok=True)
            self.log(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
        
        return True
    
    def copy_project_files(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        self.log("üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...")
        
        # –§–∞–π–ª—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        files_to_copy = [
            'app.py',
            'scheduler.py',
            'start_24_7.py',
            'requirements.txt',
            'api/',
            'analyzer/',
            'ai/',
            'templates/',
            'static/'
        ]
        
        current_dir = os.getcwd()
        
        for item in files_to_copy:
            src = os.path.join(current_dir, item)
            dst = os.path.join(self.project_dir, item)
            
            if os.path.exists(src):
                if os.path.isdir(src):
                    if os.path.exists(dst):
                        shutil.rmtree(dst)
                    shutil.copytree(src, dst)
                    self.log(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {item}")
                else:
                    shutil.copy2(src, dst)
                    self.log(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {item}")
            else:
                self.log(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {item}")
        
        return True
    
    def setup_python_environment(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.log("üêç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        venv_cmd = f"cd {self.project_dir} && python3 -m venv venv"
        result = subprocess.run(venv_cmd, shell=True, capture_output=True, text=True)
        if result.returncode != 0:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è venv: {result.stderr}")
            return False
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        pip_cmd = f"cd {self.project_dir} && source venv/bin/activate && pip install --upgrade pip"
        result = subprocess.run(pip_cmd, shell=True, capture_output=True, text=True)
        
        install_cmd = f"cd {self.project_dir} && source venv/bin/activate && pip install -r requirements.txt"
        result = subprocess.run(install_cmd, shell=True, capture_output=True, text=True)
        if result.returncode != 0:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {result.stderr}")
            return False
        
        self.log("‚úÖ Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        return True
    
    def create_systemd_service(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–ª—É–∂–±—ã"""
        self.log("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–ª—É–∂–±—ã...")
        
        service_content = f"""[Unit]
Description=ShadowFlow - Polymarket Analysis System
After=network.target

[Service]
Type=simple
User={self.user}
WorkingDirectory={self.project_dir}
Environment=PATH={self.project_dir}/venv/bin
ExecStart={self.project_dir}/venv/bin/python {self.project_dir}/start_24_7.py
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
"""
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–ª—É–∂–±—ã
        with open(f"/tmp/{self.service_name}.service", "w") as f:
            f.write(service_content)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤ systemd
        copy_cmd = f"sudo cp /tmp/{self.service_name}.service {self.service_file}"
        result = subprocess.run(copy_cmd, shell=True, capture_output=True, text=True)
        if result.returncode != 0:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª—É–∂–±—ã: {result.stderr}")
            return False
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd
        subprocess.run("sudo systemctl daemon-reload", shell=True)
        
        self.log("‚úÖ Systemd —Å–ª—É–∂–±–∞ —Å–æ–∑–¥–∞–Ω–∞")
        return True
    
    def setup_nginx(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx"""
        self.log("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx...")
        
        nginx_config_content = f"""server {{
    listen 80;
    server_name _;
    
    location / {{
        proxy_pass http://127.0.0.1:5001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }}
    
    location /static {{
        alias {self.project_dir}/static;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }}
}}
"""
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Nginx
        with open(f"/tmp/{self.project_name}_nginx", "w") as f:
            f.write(nginx_config_content)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        copy_cmd = f"sudo cp /tmp/{self.project_name}_nginx {self.nginx_config}"
        result = subprocess.run(copy_cmd, shell=True, capture_output=True, text=True)
        if result.returncode != 0:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Nginx: {result.stderr}")
            return False
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∞–π—Ç
        link_cmd = f"sudo ln -sf {self.nginx_config} /etc/nginx/sites-enabled/"
        subprocess.run(link_cmd, shell=True)
        
        # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–∞–π—Ç
        subprocess.run("sudo rm -f /etc/nginx/sites-enabled/default", shell=True)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        test_cmd = "sudo nginx -t"
        result = subprocess.run(test_cmd, shell=True, capture_output=True, text=True)
        if result.returncode != 0:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx: {result.stderr}")
            return False
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Nginx
        subprocess.run("sudo systemctl restart nginx", shell=True)
        
        self.log("‚úÖ Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return True
    
    def setup_firewall(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞"""
        self.log("üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞...")
        
        commands = [
            "sudo ufw allow ssh",
            "sudo ufw allow 'Nginx Full'",
            "sudo ufw --force enable"
        ]
        
        for cmd in commands:
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            if result.returncode != 0:
                self.log(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {result.stderr}")
        
        self.log("‚úÖ –§–∞–π—Ä–≤–æ–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return True
    
    def start_services(self):
        """–ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±"""
        self.log("üöÄ –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º ShadowFlow
        start_cmd = f"sudo systemctl start {self.service_name}"
        result = subprocess.run(start_cmd, shell=True, capture_output=True, text=True)
        if result.returncode != 0:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã: {result.stderr}")
            return False
        
        # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
        enable_cmd = f"sudo systemctl enable {self.service_name}"
        subprocess.run(enable_cmd, shell=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Nginx
        subprocess.run("sudo systemctl start nginx", shell=True)
        subprocess.run("sudo systemctl enable nginx", shell=True)
        
        self.log("‚úÖ –°–ª—É–∂–±—ã –∑–∞–ø—É—â–µ–Ω—ã")
        return True
    
    def check_deployment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª—É–∂–±—ã
        status_cmd = f"sudo systemctl status {self.service_name}"
        result = subprocess.run(status_cmd, shell=True, capture_output=True, text=True)
        
        if "active (running)" in result.stdout:
            self.log("‚úÖ ShadowFlow —Å–ª—É–∂–±–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            self.log("‚ùå ShadowFlow —Å–ª—É–∂–±–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Nginx
        nginx_cmd = "sudo systemctl status nginx"
        result = subprocess.run(nginx_cmd, shell=True, capture_output=True, text=True)
        
        if "active (running)" in result.stdout:
            self.log("‚úÖ Nginx —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            self.log("‚ùå Nginx –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º IP —Å–µ—Ä–≤–µ—Ä–∞
        ip_cmd = "curl -s ifconfig.me"
        result = subprocess.run(ip_cmd, shell=True, capture_output=True, text=True)
        server_ip = result.stdout.strip()
        
        self.log(f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ IP: {server_ip}")
        
        return True
    
    def deploy(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        self.log("üöÄ –ù–∞—á–∞–ª–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ShadowFlow –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
        
        steps = [
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π", self.check_requirements),
            ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", self.install_dependencies),
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", self.create_project_structure),
            ("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤", self.copy_project_files),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python", self.setup_python_environment),
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É–∂–±—ã", self.create_systemd_service),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx", self.setup_nginx),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞", self.setup_firewall),
            ("–ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±", self.start_services),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è", self.check_deployment)
        ]
        
        for step_name, step_func in steps:
            self.log(f"üìã {step_name}...")
            if not step_func():
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ: {step_name}")
                return False
        
        self.log("üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåê ShadowFlow Server Deployment")
    print("===============================")
    print("")
    
    deployer = ServerDeployer()
    
    if not deployer.deploy():
        print("‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        sys.exit(1)
    
    print("")
    print("üéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("============================")
    print("")
    print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É —Å–µ—Ä–≤–µ—Ä–∞")
    print("üìä Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("üîÑ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
    print("")
    print("üéõÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï:")
    print("===============")
    print(f"sudo systemctl start {deployer.service_name}")
    print(f"sudo systemctl stop {deployer.service_name}")
    print(f"sudo systemctl restart {deployer.service_name}")
    print(f"sudo systemctl status {deployer.service_name}")
    print("")
    print("üìù –õ–û–ì–ò:")
    print("========")
    print(f"sudo journalctl -u {deployer.service_name} -f")
    print(f"tail -f {deployer.project_dir}/logs/24_7.log")

if __name__ == "__main__":
    main()
