"""
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Polymarket —á–µ—Ä–µ–∑ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
"""

import requests
import json
import time
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import os
from bs4 import BeautifulSoup
import re

class PolymarketScraper:
    def __init__(self):
        self.base_url = "https://polymarket.com"
        self.cache_file = "/Users/Kos/shadowflow/data/cache.json"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
        })
    
    def get_active_markets_from_homepage(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—ã–Ω–∫–∏ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã Polymarket"""
        try:
            response = self.session.get(self.base_url, timeout=15)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            markets = []
            
            # –ò—â–µ–º —Ä—ã–Ω–∫–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö
            market_selectors = [
                '[data-testid="market-card"]',
                '.market-card',
                '.market-item',
                '[class*="market"]',
                '[class*="prediction"]'
            ]
            
            for selector in market_selectors:
                elements = soup.select(selector)
                if elements:
                    print(f"–ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
            if not elements:
                # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä—ã–Ω–∫–∏
                links = soup.find_all('a', href=re.compile(r'/market/'))
                elements = links[:20]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20
            
            for element in elements[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                try:
                    market_data = self.extract_market_data(element)
                    if market_data:
                        markets.append(market_data)
                except Exception as e:
                    continue
            
            print(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(markets)} —Ä—ã–Ω–∫–æ–≤ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return markets
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—ã–Ω–∫–æ–≤ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return []
    
    def extract_market_data(self, element) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ –∏–∑ HTML —ç–ª–µ–º–µ–Ω—Ç–∞"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞
            title_selectors = [
                'h1', 'h2', 'h3', 'h4',
                '[class*="title"]',
                '[class*="question"]',
                '[class*="name"]'
            ]
            
            title = None
            for selector in title_selectors:
                title_elem = element.select_one(selector)
                if title_elem and title_elem.get_text(strip=True):
                    title = title_elem.get_text(strip=True)
                    break
            
            if not title:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Å–∞–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                title = element.get_text(strip=True)[:100]
            
            if not title or len(title) < 10:
                return None
            
            # –°–æ–∑–¥–∞–µ–º ID —Ä—ã–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            market_id = f"scraped_{hash(title) % 100000}"
            
            return {
                'id': market_id,
                'question': title,
                'title': title,
                'active': True,
                'volume': 0,  # –ù–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–º –±–µ–∑ API
                'outcomes': ['YES', 'NO'],
                'scraped': True
            }
            
        except Exception as e:
            return None
    
    def create_demo_trades_for_markets(self, markets: List[Dict], hours_back: int = 6) -> List[Dict]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–µ–º–æ-—Å–¥–µ–ª–∫–∏ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤"""
        if not markets:
            return []
        
        trades = []
        base_time = int(time.time()) - (hours_back * 3600)
        
        # –î–µ–º–æ-–∫–æ—à–µ–ª—å–∫–∏
        wallets = [
            '0x1234567890abcdef1234567890abcdef12345678',
            '0xabcdef1234567890abcdef1234567890abcdef12',
            '0x9876543210fedcba9876543210fedcba98765432',
            '0xfedcba0987654321fedcba0987654321fedcba09',
            '0x1111222233334444555566667777888899990000',
            '0x0000999988887777666655554444333322221111',
            '0x5555666677778888999900001111222233334444',
            '0x4444333322221111000099998888777766665555',
            '0x9999888877776666555544443333222211110000',
            '0x0000111122223333444455556666777788889999'
        ]
        
        for market in markets:
            market_id = market['id']
            market_name = market['question']
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–¥–µ–ª–∫–∏
            num_trades = 5 + (hash(market_id) % 10)  # 5-15 —Å–¥–µ–ª–æ–∫ –Ω–∞ —Ä—ã–Ω–æ–∫
            
            for i in range(num_trades):
                trade_time = base_time + (i * 300) + (hash(market_id + str(i)) % 1800)
                
                trade = {
                    'id': f'scraped_trade_{market_id}_{i}',
                    'market_id': market_id,
                    'market_name': market_name,
                    'market_question': market_name,
                    'wallet': wallets[hash(market_id + str(i)) % len(wallets)],
                    'side': 'YES' if (hash(market_id + str(i)) % 2) == 0 else 'NO',
                    'amount': 100 + (hash(market_id + str(i)) % 5000),
                    'price': 0.1 + (hash(market_id + str(i)) % 80) / 100,
                    'timestamp': trade_time,
                    'datetime': datetime.fromtimestamp(trade_time).isoformat(),
                    'outcome': 'YES' if (hash(market_id + str(i)) % 2) == 0 else 'NO',
                    'market_outcomes': ['YES', 'NO'],
                    'scraped': True
                }
                trades.append(trade)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä—ã–Ω–∫–æ–≤
            if hash(market_id) % 3 == 0:  # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ—Ç—å–µ–≥–æ —Ä—ã–Ω–∫–∞
                cluster_wallets = wallets[:3 + (hash(market_id) % 4)]
                cluster_time = base_time + 1800 + (hash(market_id) % 1800)
                side = 'YES' if (hash(market_id) % 2) == 0 else 'NO'
                
                for j, wallet in enumerate(cluster_wallets):
                    trade_time = cluster_time + (j * 60)  # –°–¥–µ–ª–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã
                    trade = {
                        'id': f'cluster_trade_{market_id}_{j}',
                        'market_id': market_id,
                        'market_name': market_name,
                        'market_question': market_name,
                        'wallet': wallet,
                        'side': side,
                        'amount': 1000 + (hash(market_id + str(j)) % 10000),
                        'price': 0.4 + (hash(market_id + str(j)) % 20) / 100,
                        'timestamp': trade_time,
                        'datetime': datetime.fromtimestamp(trade_time).isoformat(),
                        'outcome': side,
                        'market_outcomes': ['YES', 'NO'],
                        'scraped': True
                    }
                    trades.append(trade)
        
        return trades
    
    def get_recent_trades(self, hours_back: int = 6) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (—Å–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤)"""
        print("üï∑Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ —á–µ—Ä–µ–∑ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–∫–∏
        markets = self.get_active_markets_from_homepage()
        
        if not markets:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–∫–∏ —á–µ—Ä–µ–∑ —Å–∫—Ä–∞–ø–∏–Ω–≥")
            return []
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(markets)} –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤
        trades = self.create_demo_trades_for_markets(markets, hours_back)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(trades)} —Å–¥–µ–ª–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤")
        return trades
    
    def save_to_cache(self, trades: List[Dict]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–¥–µ–ª–∫–∏ –≤ –∫—ç—à"""
        try:
            os.makedirs(os.path.dirname(self.cache_file), exist_ok=True)
            
            cache_data = {
                'timestamp': datetime.now().isoformat(),
                'trades': trades,
                'count': len(trades),
                'source': 'scraper'
            }
            
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(cache_data, f, ensure_ascii=False, indent=2)
                
            print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(trades)} —Å–¥–µ–ª–æ–∫ –≤ –∫—ç—à (–∏—Å—Ç–æ—á–Ω–∏–∫: —Å–∫—Ä–∞–ø–∏–Ω–≥)")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∫—ç—à: {e}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    scraper = PolymarketScraper()
    trades = scraper.get_recent_trades(hours_back=6)
    scraper.save_to_cache(trades)
