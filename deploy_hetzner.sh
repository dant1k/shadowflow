#!/bin/bash

# üöÄ –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ShadowFlow –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Hetzner
# –ê–≤—Ç–æ—Ä: AI Assistant
# –î–∞—Ç–∞: 21 –æ–∫—Ç—è–±—Ä—è 2025

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
HOST="46.62.233.6"
USER="root"
PRIVATE_KEY="ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJaF0ITwfl/atpsXfqkj8jyPy+5VK/ltKuXNLEwYZXiZ cursor"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker
DOCKER_USERNAME="dant1k"
IMAGE_NAME="shadowflow"
TAG="latest"
FULL_IMAGE_NAME="${DOCKER_USERNAME}/${IMAGE_NAME}:${TAG}"

log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ShadowFlow –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Hetzner..."
log "üìç –°–µ—Ä–≤–µ—Ä: ${HOST}"
log "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${USER}"

# –°–æ–∑–¥–∞–µ–º SSH –∫–ª—é—á
log "üîë –°–æ–∑–¥–∞–Ω–∏–µ SSH –∫–ª—é—á–∞..."
mkdir -p ~/.ssh
echo "${PRIVATE_KEY}" > ~/.ssh/hetzner_key
chmod 600 ~/.ssh/hetzner_key

# –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –≤ known_hosts
log "üîç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ known_hosts..."
ssh-keyscan -H ${HOST} >> ~/.ssh/known_hosts 2>/dev/null || true

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
log "üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É..."
if ! ssh -i ~/.ssh/hetzner_key -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${USER}@${HOST} "echo '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ'" 2>/dev/null; then
    error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É ${HOST}"
    error "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ IP –∞–¥—Ä–µ—Å –∏ SSH –∫–ª—é—á"
    exit 1
fi

success "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
log "üê≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
ssh -i ~/.ssh/hetzner_key ${USER}@${HOST} << 'EOF'
# –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É
apt-get update -y

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release \
    wget \
    unzip

# –î–æ–±–∞–≤–ª—è–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π GPG –∫–ª—é—á Docker
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Docker
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

# –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã
apt-get update -y

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker
apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

# –ó–∞–ø—É—Å–∫–∞–µ–º Docker
systemctl start docker
systemctl enable docker

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
usermod -aG docker root

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
docker --version
docker-compose --version
EOF

success "‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
log "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
ssh -i ~/.ssh/hetzner_key ${USER}@${HOST} << 'EOF'
mkdir -p /opt/shadowflow
mkdir -p /opt/shadowflow/data
mkdir -p /opt/shadowflow/logs
mkdir -p /opt/shadowflow/ssl
mkdir -p /opt/shadowflow/data/models
EOF

# –°–æ–∑–¥–∞–µ–º docker-compose —Ñ–∞–π–ª –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
log "üìù –°–æ–∑–¥–∞–Ω–∏–µ docker-compose —Ñ–∞–π–ª–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞..."
ssh -i ~/.ssh/hetzner_key ${USER}@${HOST} << EOF
cat > /opt/shadowflow/docker-compose.yml << 'COMPOSE_EOF'
version: '3.8'

services:
  shadowflow:
    image: ${FULL_IMAGE_NAME}
    container_name: shadowflow-prod
    restart: unless-stopped
    ports:
      - "5001:5001"
    volumes:
      - shadowflow-data:/app/data
      - shadowflow-logs:/app/logs
      - shadowflow-models:/app/data/models
    environment:
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=production
      - TZ=UTC
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/scheduler-status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - shadowflow-network

  nginx:
    image: nginx:alpine
    container_name: shadowflow-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - shadowflow
    networks:
      - shadowflow-network

networks:
  shadowflow-network:
    driver: bridge

volumes:
  shadowflow-data:
  shadowflow-logs:
  shadowflow-models:
COMPOSE_EOF
EOF

# –°–æ–∑–¥–∞–µ–º nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
log "üåê –°–æ–∑–¥–∞–Ω–∏–µ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
ssh -i ~/.ssh/hetzner_key ${USER}@${HOST} << 'EOF'
cat > /opt/shadowflow/nginx.conf << 'NGINX_EOF'
events {
    worker_connections 1024;
}

http {
    upstream shadowflow {
        server shadowflow:5001;
    }

    server {
        listen 80;
        server_name _;

        location / {
            proxy_pass http://shadowflow;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/ {
            proxy_pass http://shadowflow;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
NGINX_EOF
EOF

# –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
log "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
ssh -i ~/.ssh/hetzner_key ${USER}@${HOST} << 'EOF'
cd /opt/shadowflow

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
docker-compose down 2>/dev/null || true

# –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
docker-compose up -d

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
sleep 30

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
docker-compose ps
EOF

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã..."
sleep 10

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
log "üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints..."
if curl -s -f "http://${HOST}:5001/api/predictive/status" > /dev/null; then
    success "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5001"
else
    warning "‚ö†Ô∏è API –Ω–∞ –ø–æ—Ä—Ç—É 5001 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º nginx..."
    if curl -s -f "http://${HOST}/api/predictive/status" > /dev/null; then
        success "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ nginx –Ω–∞ –ø–æ—Ä—Ç—É 80"
    else
        error "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
fi

# –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
log "üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã..."
ssh -i ~/.ssh/hetzner_key ${USER}@${HOST} << 'EOF'
echo "=== –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ==="
docker-compose ps

echo ""
echo "=== –õ–æ–≥–∏ ShadowFlow ==="
docker-compose logs --tail=10 shadowflow

echo ""
echo "=== –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ ==="
docker stats --no-stream
EOF

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
log "üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
if curl -s -I "http://${HOST}:5001" | grep -q "200 OK"; then
    success "‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://${HOST}:5001"
elif curl -s -I "http://${HOST}" | grep -q "200 OK"; then
    success "‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://${HOST}"
else
    warning "‚ö†Ô∏è –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º API
if curl -s "http://${HOST}:5001/api/predictive/status" | grep -q "success"; then
    success "‚úÖ API –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    warning "‚ö†Ô∏è API –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

success "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ShadowFlow –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Hetzner –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
echo "üåê –î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ:"
echo "   - –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø: http://${HOST}:5001"
echo "   - –ß–µ—Ä–µ–∑ nginx: http://${HOST}"
echo ""
echo "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
echo "   - SSH: ssh -i ~/.ssh/hetzner_key ${USER}@${HOST}"
echo "   - –õ–æ–≥–∏: docker-compose -f /opt/shadowflow/docker-compose.yml logs -f"
echo "   - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose -f /opt/shadowflow/docker-compose.yml restart"
echo ""
echo "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "   - –°—Ç–∞—Ç—É—Å: docker-compose -f /opt/shadowflow/docker-compose.yml ps"
echo "   - –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose -f /opt/shadowflow/docker-compose.yml down"
echo "   - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: docker-compose -f /opt/shadowflow/docker-compose.yml pull && docker-compose -f /opt/shadowflow/docker-compose.yml up -d"
echo ""
success "üöÄ ShadowFlow –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Hetzner!"
